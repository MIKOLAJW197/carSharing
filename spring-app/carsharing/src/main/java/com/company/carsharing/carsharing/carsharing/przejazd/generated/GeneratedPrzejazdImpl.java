package com.company.carsharing.carsharing.carsharing.przejazd.generated;

import com.company.carsharing.carsharing.carsharing.cennik.Cennik;
import com.company.carsharing.carsharing.carsharing.przejazd.Przejazd;
import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.company.carsharing.carsharing.carsharing.uzytkownik.Uzytkownik;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.sql.Date;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.carsharing.carsharing.carsharing.przejazd.Przejazd}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPrzejazdImpl implements Przejazd {
    
    private Date dataRozpoczecia;
    private Date dataZakonczenia;
    private double dytans;
    private String lokalizacjaPoczatkowa;
    private String lokalizacjaKoncowa;
    private String uzytkownikMail;
    private Date cennikOdKiedy;
    private String samochodNrRejestracyjny;
    
    protected GeneratedPrzejazdImpl() {}
    
    @Override
    public Date getDataRozpoczecia() {
        return dataRozpoczecia;
    }
    
    @Override
    public Date getDataZakonczenia() {
        return dataZakonczenia;
    }
    
    @Override
    public double getDytans() {
        return dytans;
    }
    
    @Override
    public String getLokalizacjaPoczatkowa() {
        return lokalizacjaPoczatkowa;
    }
    
    @Override
    public String getLokalizacjaKoncowa() {
        return lokalizacjaKoncowa;
    }
    
    @Override
    public String getUzytkownikMail() {
        return uzytkownikMail;
    }
    
    @Override
    public Date getCennikOdKiedy() {
        return cennikOdKiedy;
    }
    
    @Override
    public String getSamochodNrRejestracyjny() {
        return samochodNrRejestracyjny;
    }
    
    @Override
    public Przejazd setDataRozpoczecia(Date dataRozpoczecia) {
        this.dataRozpoczecia = dataRozpoczecia;
        return this;
    }
    
    @Override
    public Przejazd setDataZakonczenia(Date dataZakonczenia) {
        this.dataZakonczenia = dataZakonczenia;
        return this;
    }
    
    @Override
    public Przejazd setDytans(double dytans) {
        this.dytans = dytans;
        return this;
    }
    
    @Override
    public Przejazd setLokalizacjaPoczatkowa(String lokalizacjaPoczatkowa) {
        this.lokalizacjaPoczatkowa = lokalizacjaPoczatkowa;
        return this;
    }
    
    @Override
    public Przejazd setLokalizacjaKoncowa(String lokalizacjaKoncowa) {
        this.lokalizacjaKoncowa = lokalizacjaKoncowa;
        return this;
    }
    
    @Override
    public Przejazd setUzytkownikMail(String uzytkownikMail) {
        this.uzytkownikMail = uzytkownikMail;
        return this;
    }
    
    @Override
    public Przejazd setCennikOdKiedy(Date cennikOdKiedy) {
        this.cennikOdKiedy = cennikOdKiedy;
        return this;
    }
    
    @Override
    public Przejazd setSamochodNrRejestracyjny(String samochodNrRejestracyjny) {
        this.samochodNrRejestracyjny = samochodNrRejestracyjny;
        return this;
    }
    
    @Override
    public Uzytkownik findUzytkownikMail(Manager<Uzytkownik> foreignManager) {
        return foreignManager.stream().filter(Uzytkownik.MAIL.equal(getUzytkownikMail())).findAny().orElse(null);
    }
    
    @Override
    public Cennik findCennikOdKiedy(Manager<Cennik> foreignManager) {
        return foreignManager.stream().filter(Cennik.OD_KIEDY.equal(getCennikOdKiedy())).findAny().orElse(null);
    }
    
    @Override
    public Samochod findSamochodNrRejestracyjny(Manager<Samochod> foreignManager) {
        return foreignManager.stream().filter(Samochod.NR_REJESTRACYJNY.equal(getSamochodNrRejestracyjny())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("dataRozpoczecia = "         + Objects.toString(getDataRozpoczecia()));
        sj.add("dataZakonczenia = "         + Objects.toString(getDataZakonczenia()));
        sj.add("dytans = "                  + Objects.toString(getDytans()));
        sj.add("lokalizacjaPoczatkowa = "   + Objects.toString(getLokalizacjaPoczatkowa()));
        sj.add("lokalizacjaKoncowa = "      + Objects.toString(getLokalizacjaKoncowa()));
        sj.add("uzytkownikMail = "          + Objects.toString(getUzytkownikMail()));
        sj.add("cennikOdKiedy = "           + Objects.toString(getCennikOdKiedy()));
        sj.add("samochodNrRejestracyjny = " + Objects.toString(getSamochodNrRejestracyjny()));
        return "PrzejazdImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Przejazd)) { return false; }
        final Przejazd thatPrzejazd = (Przejazd)that;
        if (!Objects.equals(this.getDataRozpoczecia(), thatPrzejazd.getDataRozpoczecia())) { return false; }
        if (!Objects.equals(this.getDataZakonczenia(), thatPrzejazd.getDataZakonczenia())) { return false; }
        if (this.getDytans() != thatPrzejazd.getDytans()) { return false; }
        if (!Objects.equals(this.getLokalizacjaPoczatkowa(), thatPrzejazd.getLokalizacjaPoczatkowa())) { return false; }
        if (!Objects.equals(this.getLokalizacjaKoncowa(), thatPrzejazd.getLokalizacjaKoncowa())) { return false; }
        if (!Objects.equals(this.getUzytkownikMail(), thatPrzejazd.getUzytkownikMail())) { return false; }
        if (!Objects.equals(this.getCennikOdKiedy(), thatPrzejazd.getCennikOdKiedy())) { return false; }
        if (!Objects.equals(this.getSamochodNrRejestracyjny(), thatPrzejazd.getSamochodNrRejestracyjny())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getDataRozpoczecia());
        hash = 31 * hash + Objects.hashCode(getDataZakonczenia());
        hash = 31 * hash + Double.hashCode(getDytans());
        hash = 31 * hash + Objects.hashCode(getLokalizacjaPoczatkowa());
        hash = 31 * hash + Objects.hashCode(getLokalizacjaKoncowa());
        hash = 31 * hash + Objects.hashCode(getUzytkownikMail());
        hash = 31 * hash + Objects.hashCode(getCennikOdKiedy());
        hash = 31 * hash + Objects.hashCode(getSamochodNrRejestracyjny());
        return hash;
    }
}