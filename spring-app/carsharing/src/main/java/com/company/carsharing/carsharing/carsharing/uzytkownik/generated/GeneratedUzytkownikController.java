package com.company.carsharing.carsharing.carsharing.uzytkownik.generated;

import com.company.carsharing.carsharing.carsharing.uzytkownik.Uzytkownik;
import com.company.carsharing.carsharing.carsharing.uzytkownik.UzytkownikManager;
import com.company.carsharing.carsharing.carsharing.uzytkownik.generated.GeneratedUzytkownik.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Uzytkownik entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedUzytkownikController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired UzytkownikManager manager;
    protected JsonEncoder<Uzytkownik> encoder;
    
    @PostConstruct
    void createUzytkownikEncoder() {
        encoder = jsonComponent.<Uzytkownik>emptyEncoder()
            .put("mail", Uzytkownik.MAIL)
            .put("haslo", Uzytkownik.HASLO)
            .put("imie", Uzytkownik.IMIE)
            .put("nazwisko", Uzytkownik.NAZWISKO)
            .put("pesel", Uzytkownik.PESEL)
            .put("stanSkarbonki", Uzytkownik.STAN_SKARBONKI)
            .build();
    }
    
    @GetMapping(path = "/uzytkownik", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, UzytkownikFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, UzytkownikSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedUzytkownik.Identifier> result = EnumSet.noneOf(GeneratedUzytkownik.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "mail":          return GeneratedUzytkownik.Identifier.MAIL;
            case "haslo":         return GeneratedUzytkownik.Identifier.HASLO;
            case "imie":          return GeneratedUzytkownik.Identifier.IMIE;
            case "nazwisko":      return GeneratedUzytkownik.Identifier.NAZWISKO;
            case "pesel":         return GeneratedUzytkownik.Identifier.PESEL;
            case "stanSkarbonki": return GeneratedUzytkownik.Identifier.STAN_SKARBONKI;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Uzytkownik> fieldOf(Identifier columnId) {
        switch (columnId) {
            case MAIL:           return Uzytkownik.MAIL;
            case HASLO:          return Uzytkownik.HASLO;
            case IMIE:           return Uzytkownik.IMIE;
            case NAZWISKO:       return Uzytkownik.NAZWISKO;
            case PESEL:          return Uzytkownik.PESEL;
            case STAN_SKARBONKI: return Uzytkownik.STAN_SKARBONKI;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Uzytkownik>> predicates,
            List<Comparator<Uzytkownik>> sorters,
            long start,
            long limit) {
        Stream<Uzytkownik> stream = manager.stream();
        
        for (final Predicate<Uzytkownik> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Uzytkownik>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class UzytkownikFilter extends AbstractFilter<Uzytkownik> {
        
        public UzytkownikFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Uzytkownik> toPredicate() {
            switch (property()) {
                case "mail" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.MAIL.equal(v);
                        case "ne"   : return Uzytkownik.MAIL.notEqual(v);
                        case "lt"   : return Uzytkownik.MAIL.lessThan(v);
                        case "le"   : return Uzytkownik.MAIL.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.MAIL.greaterThan(v);
                        case "ge"   : return Uzytkownik.MAIL.greaterOrEqual(v);
                        case "like" : return Uzytkownik.MAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.mail."
                        );
                    }
                }
                case "haslo" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.HASLO.equal(v);
                        case "ne"   : return Uzytkownik.HASLO.notEqual(v);
                        case "lt"   : return Uzytkownik.HASLO.lessThan(v);
                        case "le"   : return Uzytkownik.HASLO.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.HASLO.greaterThan(v);
                        case "ge"   : return Uzytkownik.HASLO.greaterOrEqual(v);
                        case "like" : return Uzytkownik.HASLO.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.haslo."
                        );
                    }
                }
                case "imie" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.IMIE.equal(v);
                        case "ne"   : return Uzytkownik.IMIE.notEqual(v);
                        case "lt"   : return Uzytkownik.IMIE.lessThan(v);
                        case "le"   : return Uzytkownik.IMIE.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.IMIE.greaterThan(v);
                        case "ge"   : return Uzytkownik.IMIE.greaterOrEqual(v);
                        case "like" : return Uzytkownik.IMIE.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.imie."
                        );
                    }
                }
                case "nazwisko" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.NAZWISKO.equal(v);
                        case "ne"   : return Uzytkownik.NAZWISKO.notEqual(v);
                        case "lt"   : return Uzytkownik.NAZWISKO.lessThan(v);
                        case "le"   : return Uzytkownik.NAZWISKO.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.NAZWISKO.greaterThan(v);
                        case "ge"   : return Uzytkownik.NAZWISKO.greaterOrEqual(v);
                        case "like" : return Uzytkownik.NAZWISKO.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.nazwisko."
                        );
                    }
                }
                case "pesel" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.PESEL.equal(v);
                        case "ne"   : return Uzytkownik.PESEL.notEqual(v);
                        case "lt"   : return Uzytkownik.PESEL.lessThan(v);
                        case "le"   : return Uzytkownik.PESEL.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.PESEL.greaterThan(v);
                        case "ge"   : return Uzytkownik.PESEL.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.pesel."
                        );
                    }
                }
                case "stanSkarbonki" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Uzytkownik.STAN_SKARBONKI.equal(v);
                        case "ne"   : return Uzytkownik.STAN_SKARBONKI.notEqual(v);
                        case "lt"   : return Uzytkownik.STAN_SKARBONKI.lessThan(v);
                        case "le"   : return Uzytkownik.STAN_SKARBONKI.lessOrEqual(v);
                        case "gt"   : return Uzytkownik.STAN_SKARBONKI.greaterThan(v);
                        case "ge"   : return Uzytkownik.STAN_SKARBONKI.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Uzytkownik.stanSkarbonki."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Uzytkownik property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class UzytkownikSort extends AbstractSort<Uzytkownik> {
        
        public UzytkownikSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Uzytkownik> toComparator() {
            final Comparator<Uzytkownik> comparator;
            switch (property()) {
                case "mail"          : comparator = Uzytkownik.MAIL.comparator();           break;
                case "haslo"         : comparator = Uzytkownik.HASLO.comparator();          break;
                case "imie"          : comparator = Uzytkownik.IMIE.comparator();           break;
                case "nazwisko"      : comparator = Uzytkownik.NAZWISKO.comparator();       break;
                case "pesel"         : comparator = Uzytkownik.PESEL.comparator();          break;
                case "stanSkarbonki" : comparator = Uzytkownik.STAN_SKARBONKI.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Uzytkownik property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}