package com.company.carsharing.carsharing.carsharing.samochod.generated;

import com.company.carsharing.carsharing.carsharing.baza.Baza;
import com.company.carsharing.carsharing.carsharing.parking.Parking;
import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * com.company.carsharing.carsharing.carsharing.samochod.Samochod}-interface
 * representing entities of the {@code samochod}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedSamochod {
    
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getNrRejestracyjny()} method.
     */
    StringField<Samochod, String> NR_REJESTRACYJNY = StringField.create(
        Identifier.NR_REJESTRACYJNY,
        Samochod::getNrRejestracyjny,
        Samochod::setNrRejestracyjny,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getDostepny()} method.
     */
    BooleanField<Samochod, Boolean> DOSTEPNY = BooleanField.create(
        Identifier.DOSTEPNY,
        Samochod::getDostepny,
        Samochod::setDostepny,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getModel()} method.
     */
    StringField<Samochod, String> MODEL = StringField.create(
        Identifier.MODEL,
        Samochod::getModel,
        Samochod::setModel,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getMarka()} method.
     */
    StringField<Samochod, String> MARKA = StringField.create(
        Identifier.MARKA,
        Samochod::getMarka,
        Samochod::setMarka,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getPrzebieg()} method.
     */
    DoubleField<Samochod, Double> PRZEBIEG = DoubleField.create(
        Identifier.PRZEBIEG,
        Samochod::getPrzebieg,
        Samochod::setPrzebieg,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getLokalizacjaPozaP()} method.
     */
    StringField<Samochod, String> LOKALIZACJA_POZA_P = StringField.create(
        Identifier.LOKALIZACJA_POZA_P,
        o -> OptionalUtil.unwrap(o.getLokalizacjaPozaP()),
        Samochod::setLokalizacjaPozaP,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getBazaLokalizacja()} method.
     */
    StringForeignKeyField<Samochod, String, Baza> BAZA_LOKALIZACJA = StringForeignKeyField.create(
        Identifier.BAZA_LOKALIZACJA,
        o -> OptionalUtil.unwrap(o.getBazaLokalizacja()),
        Samochod::setBazaLokalizacja,
        Baza.LOKALIZACJA,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Samochod} field that can be obtained
     * using the {@link Samochod#getParkingLokalizacja()} method.
     */
    StringForeignKeyField<Samochod, String, Parking> PARKING_LOKALIZACJA = StringForeignKeyField.create(
        Identifier.PARKING_LOKALIZACJA,
        o -> OptionalUtil.unwrap(o.getParkingLokalizacja()),
        Samochod::setParkingLokalizacja,
        Parking.LOKALIZACJA,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the nrRejestracyjny of this Samochod. The nrRejestracyjny field
     * corresponds to the database column
     * carsharing.carsharing.samochod.nr_rejestracyjny.
     * 
     * @return the nrRejestracyjny of this Samochod
     */
    String getNrRejestracyjny();
    
    /**
     * Returns the dostepny of this Samochod. The dostepny field corresponds to
     * the database column carsharing.carsharing.samochod.dostepny.
     * 
     * @return the dostepny of this Samochod
     */
    boolean getDostepny();
    
    /**
     * Returns the model of this Samochod. The model field corresponds to the
     * database column carsharing.carsharing.samochod.model.
     * 
     * @return the model of this Samochod
     */
    String getModel();
    
    /**
     * Returns the marka of this Samochod. The marka field corresponds to the
     * database column carsharing.carsharing.samochod.marka.
     * 
     * @return the marka of this Samochod
     */
    String getMarka();
    
    /**
     * Returns the przebieg of this Samochod. The przebieg field corresponds to
     * the database column carsharing.carsharing.samochod.przebieg.
     * 
     * @return the przebieg of this Samochod
     */
    double getPrzebieg();
    
    /**
     * Returns the lokalizacjaPozaP of this Samochod. The lokalizacjaPozaP field
     * corresponds to the database column
     * carsharing.carsharing.samochod.lokalizacja_poza_p.
     * 
     * @return the lokalizacjaPozaP of this Samochod
     */
    Optional<String> getLokalizacjaPozaP();
    
    /**
     * Returns the bazaLokalizacja of this Samochod. The bazaLokalizacja field
     * corresponds to the database column
     * carsharing.carsharing.samochod.baza_lokalizacja.
     * 
     * @return the bazaLokalizacja of this Samochod
     */
    Optional<String> getBazaLokalizacja();
    
    /**
     * Returns the parkingLokalizacja of this Samochod. The parkingLokalizacja
     * field corresponds to the database column
     * carsharing.carsharing.samochod.parking_lokalizacja.
     * 
     * @return the parkingLokalizacja of this Samochod
     */
    Optional<String> getParkingLokalizacja();
    
    /**
     * Sets the nrRejestracyjny of this Samochod. The nrRejestracyjny field
     * corresponds to the database column
     * carsharing.carsharing.samochod.nr_rejestracyjny.
     * 
     * @param nrRejestracyjny to set of this Samochod
     * @return                this Samochod instance
     */
    Samochod setNrRejestracyjny(String nrRejestracyjny);
    
    /**
     * Sets the dostepny of this Samochod. The dostepny field corresponds to the
     * database column carsharing.carsharing.samochod.dostepny.
     * 
     * @param dostepny to set of this Samochod
     * @return         this Samochod instance
     */
    Samochod setDostepny(boolean dostepny);
    
    /**
     * Sets the model of this Samochod. The model field corresponds to the
     * database column carsharing.carsharing.samochod.model.
     * 
     * @param model to set of this Samochod
     * @return      this Samochod instance
     */
    Samochod setModel(String model);
    
    /**
     * Sets the marka of this Samochod. The marka field corresponds to the
     * database column carsharing.carsharing.samochod.marka.
     * 
     * @param marka to set of this Samochod
     * @return      this Samochod instance
     */
    Samochod setMarka(String marka);
    
    /**
     * Sets the przebieg of this Samochod. The przebieg field corresponds to the
     * database column carsharing.carsharing.samochod.przebieg.
     * 
     * @param przebieg to set of this Samochod
     * @return         this Samochod instance
     */
    Samochod setPrzebieg(double przebieg);
    
    /**
     * Sets the lokalizacjaPozaP of this Samochod. The lokalizacjaPozaP field
     * corresponds to the database column
     * carsharing.carsharing.samochod.lokalizacja_poza_p.
     * 
     * @param lokalizacjaPozaP to set of this Samochod
     * @return                 this Samochod instance
     */
    Samochod setLokalizacjaPozaP(String lokalizacjaPozaP);
    
    /**
     * Sets the bazaLokalizacja of this Samochod. The bazaLokalizacja field
     * corresponds to the database column
     * carsharing.carsharing.samochod.baza_lokalizacja.
     * 
     * @param bazaLokalizacja to set of this Samochod
     * @return                this Samochod instance
     */
    Samochod setBazaLokalizacja(String bazaLokalizacja);
    
    /**
     * Sets the parkingLokalizacja of this Samochod. The parkingLokalizacja
     * field corresponds to the database column
     * carsharing.carsharing.samochod.parking_lokalizacja.
     * 
     * @param parkingLokalizacja to set of this Samochod
     * @return                   this Samochod instance
     */
    Samochod setParkingLokalizacja(String parkingLokalizacja);
    
    /**
     * Queries the specified manager for the referenced Baza. If no such Baza
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Baza> findBazaLokalizacja(Manager<Baza> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Parking. If no such
     * Parking exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Parking> findParkingLokalizacja(Manager<Parking> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Samochod> {
        
        NR_REJESTRACYJNY    ("nr_rejestracyjny"),
        DOSTEPNY            ("dostepny"),
        MODEL               ("model"),
        MARKA               ("marka"),
        PRZEBIEG            ("przebieg"),
        LOKALIZACJA_POZA_P  ("lokalizacja_poza_p"),
        BAZA_LOKALIZACJA    ("baza_lokalizacja"),
        PARKING_LOKALIZACJA ("parking_lokalizacja");
        
        private final String columnId;
        private final TableIdentifier<Samochod> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "carsharing";
        }
        
        @Override
        public String getSchemaId() {
            return "carsharing";
        }
        
        @Override
        public String getTableId() {
            return "samochod";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Samochod> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}