package com.company.carsharing.carsharing.carsharing.przejazd.generated;

import com.company.carsharing.carsharing.carsharing.przejazd.Przejazd;
import com.company.carsharing.carsharing.carsharing.przejazd.PrzejazdManager;
import com.company.carsharing.carsharing.carsharing.przejazd.generated.GeneratedPrzejazd.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Przejazd entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedPrzejazdController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired PrzejazdManager manager;
    protected JsonEncoder<Przejazd> encoder;
    
    @PostConstruct
    void createPrzejazdEncoder() {
        encoder = jsonComponent.<Przejazd>emptyEncoder()
            .put("dataRozpoczecia", Przejazd.DATA_ROZPOCZECIA)
            .put("dataZakonczenia", Przejazd.DATA_ZAKONCZENIA)
            .put("dytans", Przejazd.DYTANS)
            .put("lokalizacjaPoczatkowa", Przejazd.LOKALIZACJA_POCZATKOWA)
            .put("lokalizacjaKoncowa", Przejazd.LOKALIZACJA_KONCOWA)
            .put("uzytkownikMail", Przejazd.UZYTKOWNIK_MAIL)
            .put("cennikOdKiedy", Przejazd.CENNIK_OD_KIEDY)
            .put("samochodNrRejestracyjny", Przejazd.SAMOCHOD_NR_REJESTRACYJNY)
            .build();
    }
    
    @GetMapping(path = "/przejazd", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, PrzejazdFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, PrzejazdSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedPrzejazd.Identifier> result = EnumSet.noneOf(GeneratedPrzejazd.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "dataRozpoczecia":         return GeneratedPrzejazd.Identifier.DATA_ROZPOCZECIA;
            case "dataZakonczenia":         return GeneratedPrzejazd.Identifier.DATA_ZAKONCZENIA;
            case "dytans":                  return GeneratedPrzejazd.Identifier.DYTANS;
            case "lokalizacjaPoczatkowa":   return GeneratedPrzejazd.Identifier.LOKALIZACJA_POCZATKOWA;
            case "lokalizacjaKoncowa":      return GeneratedPrzejazd.Identifier.LOKALIZACJA_KONCOWA;
            case "uzytkownikMail":          return GeneratedPrzejazd.Identifier.UZYTKOWNIK_MAIL;
            case "cennikOdKiedy":           return GeneratedPrzejazd.Identifier.CENNIK_OD_KIEDY;
            case "samochodNrRejestracyjny": return GeneratedPrzejazd.Identifier.SAMOCHOD_NR_REJESTRACYJNY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Przejazd> fieldOf(Identifier columnId) {
        switch (columnId) {
            case DATA_ROZPOCZECIA:          return Przejazd.DATA_ROZPOCZECIA;
            case DATA_ZAKONCZENIA:          return Przejazd.DATA_ZAKONCZENIA;
            case DYTANS:                    return Przejazd.DYTANS;
            case LOKALIZACJA_POCZATKOWA:    return Przejazd.LOKALIZACJA_POCZATKOWA;
            case LOKALIZACJA_KONCOWA:       return Przejazd.LOKALIZACJA_KONCOWA;
            case UZYTKOWNIK_MAIL:           return Przejazd.UZYTKOWNIK_MAIL;
            case CENNIK_OD_KIEDY:           return Przejazd.CENNIK_OD_KIEDY;
            case SAMOCHOD_NR_REJESTRACYJNY: return Przejazd.SAMOCHOD_NR_REJESTRACYJNY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Przejazd>> predicates,
            List<Comparator<Przejazd>> sorters,
            long start,
            long limit) {
        Stream<Przejazd> stream = manager.stream();
        
        for (final Predicate<Przejazd> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Przejazd>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class PrzejazdFilter extends AbstractFilter<Przejazd> {
        
        public PrzejazdFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Przejazd> toPredicate() {
            switch (property()) {
                case "dataRozpoczecia" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Przejazd.DATA_ROZPOCZECIA.equal(v);
                        case "ne"   : return Przejazd.DATA_ROZPOCZECIA.notEqual(v);
                        case "lt"   : return Przejazd.DATA_ROZPOCZECIA.lessThan(v);
                        case "le"   : return Przejazd.DATA_ROZPOCZECIA.lessOrEqual(v);
                        case "gt"   : return Przejazd.DATA_ROZPOCZECIA.greaterThan(v);
                        case "ge"   : return Przejazd.DATA_ROZPOCZECIA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.dataRozpoczecia."
                        );
                    }
                }
                case "dataZakonczenia" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Przejazd.DATA_ZAKONCZENIA.equal(v);
                        case "ne"   : return Przejazd.DATA_ZAKONCZENIA.notEqual(v);
                        case "lt"   : return Przejazd.DATA_ZAKONCZENIA.lessThan(v);
                        case "le"   : return Przejazd.DATA_ZAKONCZENIA.lessOrEqual(v);
                        case "gt"   : return Przejazd.DATA_ZAKONCZENIA.greaterThan(v);
                        case "ge"   : return Przejazd.DATA_ZAKONCZENIA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.dataZakonczenia."
                        );
                    }
                }
                case "dytans" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Przejazd.DYTANS.equal(v);
                        case "ne"   : return Przejazd.DYTANS.notEqual(v);
                        case "lt"   : return Przejazd.DYTANS.lessThan(v);
                        case "le"   : return Przejazd.DYTANS.lessOrEqual(v);
                        case "gt"   : return Przejazd.DYTANS.greaterThan(v);
                        case "ge"   : return Przejazd.DYTANS.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.dytans."
                        );
                    }
                }
                case "lokalizacjaPoczatkowa" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Przejazd.LOKALIZACJA_POCZATKOWA.equal(v);
                        case "ne"   : return Przejazd.LOKALIZACJA_POCZATKOWA.notEqual(v);
                        case "lt"   : return Przejazd.LOKALIZACJA_POCZATKOWA.lessThan(v);
                        case "le"   : return Przejazd.LOKALIZACJA_POCZATKOWA.lessOrEqual(v);
                        case "gt"   : return Przejazd.LOKALIZACJA_POCZATKOWA.greaterThan(v);
                        case "ge"   : return Przejazd.LOKALIZACJA_POCZATKOWA.greaterOrEqual(v);
                        case "like" : return Przejazd.LOKALIZACJA_POCZATKOWA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.lokalizacjaPoczatkowa."
                        );
                    }
                }
                case "lokalizacjaKoncowa" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Przejazd.LOKALIZACJA_KONCOWA.equal(v);
                        case "ne"   : return Przejazd.LOKALIZACJA_KONCOWA.notEqual(v);
                        case "lt"   : return Przejazd.LOKALIZACJA_KONCOWA.lessThan(v);
                        case "le"   : return Przejazd.LOKALIZACJA_KONCOWA.lessOrEqual(v);
                        case "gt"   : return Przejazd.LOKALIZACJA_KONCOWA.greaterThan(v);
                        case "ge"   : return Przejazd.LOKALIZACJA_KONCOWA.greaterOrEqual(v);
                        case "like" : return Przejazd.LOKALIZACJA_KONCOWA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.lokalizacjaKoncowa."
                        );
                    }
                }
                case "uzytkownikMail" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Przejazd.UZYTKOWNIK_MAIL.equal(v);
                        case "ne"   : return Przejazd.UZYTKOWNIK_MAIL.notEqual(v);
                        case "lt"   : return Przejazd.UZYTKOWNIK_MAIL.lessThan(v);
                        case "le"   : return Przejazd.UZYTKOWNIK_MAIL.lessOrEqual(v);
                        case "gt"   : return Przejazd.UZYTKOWNIK_MAIL.greaterThan(v);
                        case "ge"   : return Przejazd.UZYTKOWNIK_MAIL.greaterOrEqual(v);
                        case "like" : return Przejazd.UZYTKOWNIK_MAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.uzytkownikMail."
                        );
                    }
                }
                case "cennikOdKiedy" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Przejazd.CENNIK_OD_KIEDY.equal(v);
                        case "ne"   : return Przejazd.CENNIK_OD_KIEDY.notEqual(v);
                        case "lt"   : return Przejazd.CENNIK_OD_KIEDY.lessThan(v);
                        case "le"   : return Przejazd.CENNIK_OD_KIEDY.lessOrEqual(v);
                        case "gt"   : return Przejazd.CENNIK_OD_KIEDY.greaterThan(v);
                        case "ge"   : return Przejazd.CENNIK_OD_KIEDY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.cennikOdKiedy."
                        );
                    }
                }
                case "samochodNrRejestracyjny" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.equal(v);
                        case "ne"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.notEqual(v);
                        case "lt"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.lessThan(v);
                        case "le"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.lessOrEqual(v);
                        case "gt"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.greaterThan(v);
                        case "ge"   : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.greaterOrEqual(v);
                        case "like" : return Przejazd.SAMOCHOD_NR_REJESTRACYJNY.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Przejazd.samochodNrRejestracyjny."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Przejazd property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class PrzejazdSort extends AbstractSort<Przejazd> {
        
        public PrzejazdSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Przejazd> toComparator() {
            final Comparator<Przejazd> comparator;
            switch (property()) {
                case "dataRozpoczecia"         : comparator = Przejazd.DATA_ROZPOCZECIA.comparator();          break;
                case "dataZakonczenia"         : comparator = Przejazd.DATA_ZAKONCZENIA.comparator();          break;
                case "dytans"                  : comparator = Przejazd.DYTANS.comparator();                    break;
                case "lokalizacjaPoczatkowa"   : comparator = Przejazd.LOKALIZACJA_POCZATKOWA.comparator();    break;
                case "lokalizacjaKoncowa"      : comparator = Przejazd.LOKALIZACJA_KONCOWA.comparator();       break;
                case "uzytkownikMail"          : comparator = Przejazd.UZYTKOWNIK_MAIL.comparator();           break;
                case "cennikOdKiedy"           : comparator = Przejazd.CENNIK_OD_KIEDY.comparator();           break;
                case "samochodNrRejestracyjny" : comparator = Przejazd.SAMOCHOD_NR_REJESTRACYJNY.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Przejazd property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}