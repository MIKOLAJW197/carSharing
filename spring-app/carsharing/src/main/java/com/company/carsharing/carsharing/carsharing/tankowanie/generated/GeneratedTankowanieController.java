package com.company.carsharing.carsharing.carsharing.tankowanie.generated;

import com.company.carsharing.carsharing.carsharing.tankowanie.Tankowanie;
import com.company.carsharing.carsharing.carsharing.tankowanie.TankowanieManager;
import com.company.carsharing.carsharing.carsharing.tankowanie.generated.GeneratedTankowanie.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Tankowanie entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedTankowanieController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired TankowanieManager manager;
    protected JsonEncoder<Tankowanie> encoder;
    
    @PostConstruct
    void createTankowanieEncoder() {
        encoder = jsonComponent.<Tankowanie>emptyEncoder()
            .put("id", Tankowanie.ID)
            .put("siecStacji", Tankowanie.SIEC_STACJI)
            .put("ileLitrow", Tankowanie.ILE_LITROW)
            .put("kwota", Tankowanie.KWOTA)
            .put("przejazdDataRozpoczecia", Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA)
            .put("przejazdUzytkownikMail", Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL)
            .put("przejazdNrRejestracyjny", Tankowanie.PRZEJAZD_NR_REJESTRACYJNY)
            .build();
    }
    
    @GetMapping(path = "/tankowanie", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, TankowanieFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, TankowanieSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedTankowanie.Identifier> result = EnumSet.noneOf(GeneratedTankowanie.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":                      return GeneratedTankowanie.Identifier.ID;
            case "siecStacji":              return GeneratedTankowanie.Identifier.SIEC_STACJI;
            case "ileLitrow":               return GeneratedTankowanie.Identifier.ILE_LITROW;
            case "kwota":                   return GeneratedTankowanie.Identifier.KWOTA;
            case "przejazdDataRozpoczecia": return GeneratedTankowanie.Identifier.PRZEJAZD_DATA_ROZPOCZECIA;
            case "przejazdUzytkownikMail":  return GeneratedTankowanie.Identifier.PRZEJAZD_UZYTKOWNIK_MAIL;
            case "przejazdNrRejestracyjny": return GeneratedTankowanie.Identifier.PRZEJAZD_NR_REJESTRACYJNY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Tankowanie> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:                        return Tankowanie.ID;
            case SIEC_STACJI:               return Tankowanie.SIEC_STACJI;
            case ILE_LITROW:                return Tankowanie.ILE_LITROW;
            case KWOTA:                     return Tankowanie.KWOTA;
            case PRZEJAZD_DATA_ROZPOCZECIA: return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA;
            case PRZEJAZD_UZYTKOWNIK_MAIL:  return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL;
            case PRZEJAZD_NR_REJESTRACYJNY: return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Tankowanie>> predicates,
            List<Comparator<Tankowanie>> sorters,
            long start,
            long limit) {
        Stream<Tankowanie> stream = manager.stream();
        
        for (final Predicate<Tankowanie> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Tankowanie>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class TankowanieFilter extends AbstractFilter<Tankowanie> {
        
        public TankowanieFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Tankowanie> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Tankowanie.ID.equal(v);
                        case "ne"   : return Tankowanie.ID.notEqual(v);
                        case "lt"   : return Tankowanie.ID.lessThan(v);
                        case "le"   : return Tankowanie.ID.lessOrEqual(v);
                        case "gt"   : return Tankowanie.ID.greaterThan(v);
                        case "ge"   : return Tankowanie.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.id."
                        );
                    }
                }
                case "siecStacji" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Tankowanie.SIEC_STACJI.equal(v);
                        case "ne"   : return Tankowanie.SIEC_STACJI.notEqual(v);
                        case "lt"   : return Tankowanie.SIEC_STACJI.lessThan(v);
                        case "le"   : return Tankowanie.SIEC_STACJI.lessOrEqual(v);
                        case "gt"   : return Tankowanie.SIEC_STACJI.greaterThan(v);
                        case "ge"   : return Tankowanie.SIEC_STACJI.greaterOrEqual(v);
                        case "like" : return Tankowanie.SIEC_STACJI.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.siecStacji."
                        );
                    }
                }
                case "ileLitrow" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Tankowanie.ILE_LITROW.equal(v);
                        case "ne"   : return Tankowanie.ILE_LITROW.notEqual(v);
                        case "lt"   : return Tankowanie.ILE_LITROW.lessThan(v);
                        case "le"   : return Tankowanie.ILE_LITROW.lessOrEqual(v);
                        case "gt"   : return Tankowanie.ILE_LITROW.greaterThan(v);
                        case "ge"   : return Tankowanie.ILE_LITROW.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.ileLitrow."
                        );
                    }
                }
                case "kwota" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Tankowanie.KWOTA.equal(v);
                        case "ne"   : return Tankowanie.KWOTA.notEqual(v);
                        case "lt"   : return Tankowanie.KWOTA.lessThan(v);
                        case "le"   : return Tankowanie.KWOTA.lessOrEqual(v);
                        case "gt"   : return Tankowanie.KWOTA.greaterThan(v);
                        case "ge"   : return Tankowanie.KWOTA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.kwota."
                        );
                    }
                }
                case "przejazdDataRozpoczecia" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.equal(v);
                        case "ne"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.notEqual(v);
                        case "lt"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.lessThan(v);
                        case "le"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.lessOrEqual(v);
                        case "gt"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.greaterThan(v);
                        case "ge"   : return Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.przejazdDataRozpoczecia."
                        );
                    }
                }
                case "przejazdUzytkownikMail" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.equal(v);
                        case "ne"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.notEqual(v);
                        case "lt"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.lessThan(v);
                        case "le"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.lessOrEqual(v);
                        case "gt"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.greaterThan(v);
                        case "ge"   : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.greaterOrEqual(v);
                        case "like" : return Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.przejazdUzytkownikMail."
                        );
                    }
                }
                case "przejazdNrRejestracyjny" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.equal(v);
                        case "ne"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.notEqual(v);
                        case "lt"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.lessThan(v);
                        case "le"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.lessOrEqual(v);
                        case "gt"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.greaterThan(v);
                        case "ge"   : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.greaterOrEqual(v);
                        case "like" : return Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Tankowanie.przejazdNrRejestracyjny."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Tankowanie property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class TankowanieSort extends AbstractSort<Tankowanie> {
        
        public TankowanieSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Tankowanie> toComparator() {
            final Comparator<Tankowanie> comparator;
            switch (property()) {
                case "id"                      : comparator = Tankowanie.ID.comparator();                        break;
                case "siecStacji"              : comparator = Tankowanie.SIEC_STACJI.comparator();               break;
                case "ileLitrow"               : comparator = Tankowanie.ILE_LITROW.comparator();                break;
                case "kwota"                   : comparator = Tankowanie.KWOTA.comparator();                     break;
                case "przejazdDataRozpoczecia" : comparator = Tankowanie.PRZEJAZD_DATA_ROZPOCZECIA.comparator(); break;
                case "przejazdUzytkownikMail"  : comparator = Tankowanie.PRZEJAZD_UZYTKOWNIK_MAIL.comparator();  break;
                case "przejazdNrRejestracyjny" : comparator = Tankowanie.PRZEJAZD_NR_REJESTRACYJNY.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Tankowanie property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}