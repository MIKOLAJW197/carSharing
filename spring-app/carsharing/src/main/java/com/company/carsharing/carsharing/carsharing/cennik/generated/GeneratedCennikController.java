package com.company.carsharing.carsharing.carsharing.cennik.generated;

import com.company.carsharing.carsharing.carsharing.cennik.Cennik;
import com.company.carsharing.carsharing.carsharing.cennik.CennikManager;
import com.company.carsharing.carsharing.carsharing.cennik.generated.GeneratedCennik.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Cennik entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedCennikController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired CennikManager manager;
    protected JsonEncoder<Cennik> encoder;
    
    @PostConstruct
    void createCennikEncoder() {
        encoder = jsonComponent.<Cennik>emptyEncoder()
            .put("odKiedy", Cennik.OD_KIEDY)
            .put("doKiedy", Cennik.DO_KIEDY)
            .put("cenaKilometra", Cennik.CENA_KILOMETRA)
            .put("cenaMinuty", Cennik.CENA_MINUTY)
            .build();
    }
    
    @GetMapping(path = "/cennik", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, CennikFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, CennikSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedCennik.Identifier> result = EnumSet.noneOf(GeneratedCennik.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "odKiedy":       return GeneratedCennik.Identifier.OD_KIEDY;
            case "doKiedy":       return GeneratedCennik.Identifier.DO_KIEDY;
            case "cenaKilometra": return GeneratedCennik.Identifier.CENA_KILOMETRA;
            case "cenaMinuty":    return GeneratedCennik.Identifier.CENA_MINUTY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Cennik> fieldOf(Identifier columnId) {
        switch (columnId) {
            case OD_KIEDY:       return Cennik.OD_KIEDY;
            case DO_KIEDY:       return Cennik.DO_KIEDY;
            case CENA_KILOMETRA: return Cennik.CENA_KILOMETRA;
            case CENA_MINUTY:    return Cennik.CENA_MINUTY;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Cennik>> predicates,
            List<Comparator<Cennik>> sorters,
            long start,
            long limit) {
        Stream<Cennik> stream = manager.stream();
        
        for (final Predicate<Cennik> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Cennik>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class CennikFilter extends AbstractFilter<Cennik> {
        
        public CennikFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Cennik> toPredicate() {
            switch (property()) {
                case "odKiedy" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Cennik.OD_KIEDY.equal(v);
                        case "ne"   : return Cennik.OD_KIEDY.notEqual(v);
                        case "lt"   : return Cennik.OD_KIEDY.lessThan(v);
                        case "le"   : return Cennik.OD_KIEDY.lessOrEqual(v);
                        case "gt"   : return Cennik.OD_KIEDY.greaterThan(v);
                        case "ge"   : return Cennik.OD_KIEDY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cennik.odKiedy."
                        );
                    }
                }
                case "doKiedy" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Cennik.DO_KIEDY.equal(v);
                        case "ne"   : return Cennik.DO_KIEDY.notEqual(v);
                        case "lt"   : return Cennik.DO_KIEDY.lessThan(v);
                        case "le"   : return Cennik.DO_KIEDY.lessOrEqual(v);
                        case "gt"   : return Cennik.DO_KIEDY.greaterThan(v);
                        case "ge"   : return Cennik.DO_KIEDY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cennik.doKiedy."
                        );
                    }
                }
                case "cenaKilometra" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Cennik.CENA_KILOMETRA.equal(v);
                        case "ne"   : return Cennik.CENA_KILOMETRA.notEqual(v);
                        case "lt"   : return Cennik.CENA_KILOMETRA.lessThan(v);
                        case "le"   : return Cennik.CENA_KILOMETRA.lessOrEqual(v);
                        case "gt"   : return Cennik.CENA_KILOMETRA.greaterThan(v);
                        case "ge"   : return Cennik.CENA_KILOMETRA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cennik.cenaKilometra."
                        );
                    }
                }
                case "cenaMinuty" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Cennik.CENA_MINUTY.equal(v);
                        case "ne"   : return Cennik.CENA_MINUTY.notEqual(v);
                        case "lt"   : return Cennik.CENA_MINUTY.lessThan(v);
                        case "le"   : return Cennik.CENA_MINUTY.lessOrEqual(v);
                        case "gt"   : return Cennik.CENA_MINUTY.greaterThan(v);
                        case "ge"   : return Cennik.CENA_MINUTY.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Cennik.cenaMinuty."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Cennik property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class CennikSort extends AbstractSort<Cennik> {
        
        public CennikSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Cennik> toComparator() {
            final Comparator<Cennik> comparator;
            switch (property()) {
                case "odKiedy"       : comparator = Cennik.OD_KIEDY.comparator();       break;
                case "doKiedy"       : comparator = Cennik.DO_KIEDY.comparator();       break;
                case "cenaKilometra" : comparator = Cennik.CENA_KILOMETRA.comparator(); break;
                case "cenaMinuty"    : comparator = Cennik.CENA_MINUTY.comparator();    break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Cennik property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}