package com.company.carsharing.carsharing.carsharing.pracer_techniczne.generated;

import com.company.carsharing.carsharing.carsharing.baza.Baza;
import com.company.carsharing.carsharing.carsharing.pracer_techniczne.PracerTechniczne;
import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;

/**
 * The generated base for the {@link
 * com.company.carsharing.carsharing.carsharing.pracer_techniczne.PracerTechniczne}-interface
 * representing entities of the {@code pracer_techniczne}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPracerTechniczne {
    
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getId()} method.
     */
    IntField<PracerTechniczne, Integer> ID = IntField.create(
        Identifier.ID,
        PracerTechniczne::getId,
        PracerTechniczne::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getCoRobione()} method.
     */
    StringField<PracerTechniczne, String> CO_ROBIONE = StringField.create(
        Identifier.CO_ROBIONE,
        PracerTechniczne::getCoRobione,
        PracerTechniczne::setCoRobione,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getOdKiedy()} method.
     */
    ComparableField<PracerTechniczne, Date, Date> OD_KIEDY = ComparableField.create(
        Identifier.OD_KIEDY,
        PracerTechniczne::getOdKiedy,
        PracerTechniczne::setOdKiedy,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getDoKiedy()} method.
     */
    ComparableField<PracerTechniczne, Date, Date> DO_KIEDY = ComparableField.create(
        Identifier.DO_KIEDY,
        PracerTechniczne::getDoKiedy,
        PracerTechniczne::setDoKiedy,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getBazaLokalizacja()} method.
     */
    StringForeignKeyField<PracerTechniczne, String, Baza> BAZA_LOKALIZACJA = StringForeignKeyField.create(
        Identifier.BAZA_LOKALIZACJA,
        PracerTechniczne::getBazaLokalizacja,
        PracerTechniczne::setBazaLokalizacja,
        Baza.LOKALIZACJA,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link PracerTechniczne} field that can be
     * obtained using the {@link PracerTechniczne#getSamochodNrRejestracyjny()}
     * method.
     */
    StringForeignKeyField<PracerTechniczne, String, Samochod> SAMOCHOD_NR_REJESTRACYJNY = StringForeignKeyField.create(
        Identifier.SAMOCHOD_NR_REJESTRACYJNY,
        PracerTechniczne::getSamochodNrRejestracyjny,
        PracerTechniczne::setSamochodNrRejestracyjny,
        Samochod.NR_REJESTRACYJNY,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this PracerTechniczne. The id field corresponds to the
     * database column carsharing.carsharing.pracer_techniczne.id.
     * 
     * @return the id of this PracerTechniczne
     */
    int getId();
    
    /**
     * Returns the coRobione of this PracerTechniczne. The coRobione field
     * corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.co_robione.
     * 
     * @return the coRobione of this PracerTechniczne
     */
    String getCoRobione();
    
    /**
     * Returns the odKiedy of this PracerTechniczne. The odKiedy field
     * corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.od_kiedy.
     * 
     * @return the odKiedy of this PracerTechniczne
     */
    Date getOdKiedy();
    
    /**
     * Returns the doKiedy of this PracerTechniczne. The doKiedy field
     * corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.do_kiedy.
     * 
     * @return the doKiedy of this PracerTechniczne
     */
    Date getDoKiedy();
    
    /**
     * Returns the bazaLokalizacja of this PracerTechniczne. The bazaLokalizacja
     * field corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.baza_lokalizacja.
     * 
     * @return the bazaLokalizacja of this PracerTechniczne
     */
    String getBazaLokalizacja();
    
    /**
     * Returns the samochodNrRejestracyjny of this PracerTechniczne. The
     * samochodNrRejestracyjny field corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.samochod_nr_rejestracyjny.
     * 
     * @return the samochodNrRejestracyjny of this PracerTechniczne
     */
    String getSamochodNrRejestracyjny();
    
    /**
     * Sets the id of this PracerTechniczne. The id field corresponds to the
     * database column carsharing.carsharing.pracer_techniczne.id.
     * 
     * @param id to set of this PracerTechniczne
     * @return   this PracerTechniczne instance
     */
    PracerTechniczne setId(int id);
    
    /**
     * Sets the coRobione of this PracerTechniczne. The coRobione field
     * corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.co_robione.
     * 
     * @param coRobione to set of this PracerTechniczne
     * @return          this PracerTechniczne instance
     */
    PracerTechniczne setCoRobione(String coRobione);
    
    /**
     * Sets the odKiedy of this PracerTechniczne. The odKiedy field corresponds
     * to the database column carsharing.carsharing.pracer_techniczne.od_kiedy.
     * 
     * @param odKiedy to set of this PracerTechniczne
     * @return        this PracerTechniczne instance
     */
    PracerTechniczne setOdKiedy(Date odKiedy);
    
    /**
     * Sets the doKiedy of this PracerTechniczne. The doKiedy field corresponds
     * to the database column carsharing.carsharing.pracer_techniczne.do_kiedy.
     * 
     * @param doKiedy to set of this PracerTechniczne
     * @return        this PracerTechniczne instance
     */
    PracerTechniczne setDoKiedy(Date doKiedy);
    
    /**
     * Sets the bazaLokalizacja of this PracerTechniczne. The bazaLokalizacja
     * field corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.baza_lokalizacja.
     * 
     * @param bazaLokalizacja to set of this PracerTechniczne
     * @return                this PracerTechniczne instance
     */
    PracerTechniczne setBazaLokalizacja(String bazaLokalizacja);
    
    /**
     * Sets the samochodNrRejestracyjny of this PracerTechniczne. The
     * samochodNrRejestracyjny field corresponds to the database column
     * carsharing.carsharing.pracer_techniczne.samochod_nr_rejestracyjny.
     * 
     * @param samochodNrRejestracyjny to set of this PracerTechniczne
     * @return                        this PracerTechniczne instance
     */
    PracerTechniczne setSamochodNrRejestracyjny(String samochodNrRejestracyjny);
    
    /**
     * Queries the specified manager for the referenced Baza. If no such Baza
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Baza findBazaLokalizacja(Manager<Baza> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Samochod. If no such
     * Samochod exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Samochod findSamochodNrRejestracyjny(Manager<Samochod> foreignManager);
    
    enum Identifier implements ColumnIdentifier<PracerTechniczne> {
        
        ID                        ("id"),
        CO_ROBIONE                ("co_robione"),
        OD_KIEDY                  ("od_kiedy"),
        DO_KIEDY                  ("do_kiedy"),
        BAZA_LOKALIZACJA          ("baza_lokalizacja"),
        SAMOCHOD_NR_REJESTRACYJNY ("samochod_nr_rejestracyjny");
        
        private final String columnId;
        private final TableIdentifier<PracerTechniczne> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "carsharing";
        }
        
        @Override
        public String getSchemaId() {
            return "carsharing";
        }
        
        @Override
        public String getTableId() {
            return "pracer_techniczne";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<PracerTechniczne> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}