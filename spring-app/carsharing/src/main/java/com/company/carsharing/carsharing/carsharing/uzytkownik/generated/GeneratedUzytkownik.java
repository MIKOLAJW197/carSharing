package com.company.carsharing.carsharing.carsharing.uzytkownik.generated;

import com.company.carsharing.carsharing.carsharing.uzytkownik.Uzytkownik;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.carsharing.carsharing.carsharing.uzytkownik.Uzytkownik}-interface
 * representing entities of the {@code uzytkownik}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUzytkownik {
    
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getMail()} method.
     */
    StringField<Uzytkownik, String> MAIL = StringField.create(
        Identifier.MAIL,
        Uzytkownik::getMail,
        Uzytkownik::setMail,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getHaslo()} method.
     */
    StringField<Uzytkownik, String> HASLO = StringField.create(
        Identifier.HASLO,
        Uzytkownik::getHaslo,
        Uzytkownik::setHaslo,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getImie()} method.
     */
    StringField<Uzytkownik, String> IMIE = StringField.create(
        Identifier.IMIE,
        Uzytkownik::getImie,
        Uzytkownik::setImie,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getNazwisko()} method.
     */
    StringField<Uzytkownik, String> NAZWISKO = StringField.create(
        Identifier.NAZWISKO,
        Uzytkownik::getNazwisko,
        Uzytkownik::setNazwisko,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getPesel()} method.
     */
    IntField<Uzytkownik, Integer> PESEL = IntField.create(
        Identifier.PESEL,
        Uzytkownik::getPesel,
        Uzytkownik::setPesel,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Uzytkownik} field that can be
     * obtained using the {@link Uzytkownik#getStanSkarbonki()} method.
     */
    DoubleField<Uzytkownik, Double> STAN_SKARBONKI = DoubleField.create(
        Identifier.STAN_SKARBONKI,
        Uzytkownik::getStanSkarbonki,
        Uzytkownik::setStanSkarbonki,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the mail of this Uzytkownik. The mail field corresponds to the
     * database column carsharing.carsharing.uzytkownik.mail.
     * 
     * @return the mail of this Uzytkownik
     */
    String getMail();
    
    /**
     * Returns the haslo of this Uzytkownik. The haslo field corresponds to the
     * database column carsharing.carsharing.uzytkownik.haslo.
     * 
     * @return the haslo of this Uzytkownik
     */
    String getHaslo();
    
    /**
     * Returns the imie of this Uzytkownik. The imie field corresponds to the
     * database column carsharing.carsharing.uzytkownik.imie.
     * 
     * @return the imie of this Uzytkownik
     */
    String getImie();
    
    /**
     * Returns the nazwisko of this Uzytkownik. The nazwisko field corresponds
     * to the database column carsharing.carsharing.uzytkownik.nazwisko.
     * 
     * @return the nazwisko of this Uzytkownik
     */
    String getNazwisko();
    
    /**
     * Returns the pesel of this Uzytkownik. The pesel field corresponds to the
     * database column carsharing.carsharing.uzytkownik.pesel.
     * 
     * @return the pesel of this Uzytkownik
     */
    int getPesel();
    
    /**
     * Returns the stanSkarbonki of this Uzytkownik. The stanSkarbonki field
     * corresponds to the database column
     * carsharing.carsharing.uzytkownik.stan_skarbonki.
     * 
     * @return the stanSkarbonki of this Uzytkownik
     */
    double getStanSkarbonki();
    
    /**
     * Sets the mail of this Uzytkownik. The mail field corresponds to the
     * database column carsharing.carsharing.uzytkownik.mail.
     * 
     * @param mail to set of this Uzytkownik
     * @return     this Uzytkownik instance
     */
    Uzytkownik setMail(String mail);
    
    /**
     * Sets the haslo of this Uzytkownik. The haslo field corresponds to the
     * database column carsharing.carsharing.uzytkownik.haslo.
     * 
     * @param haslo to set of this Uzytkownik
     * @return      this Uzytkownik instance
     */
    Uzytkownik setHaslo(String haslo);
    
    /**
     * Sets the imie of this Uzytkownik. The imie field corresponds to the
     * database column carsharing.carsharing.uzytkownik.imie.
     * 
     * @param imie to set of this Uzytkownik
     * @return     this Uzytkownik instance
     */
    Uzytkownik setImie(String imie);
    
    /**
     * Sets the nazwisko of this Uzytkownik. The nazwisko field corresponds to
     * the database column carsharing.carsharing.uzytkownik.nazwisko.
     * 
     * @param nazwisko to set of this Uzytkownik
     * @return         this Uzytkownik instance
     */
    Uzytkownik setNazwisko(String nazwisko);
    
    /**
     * Sets the pesel of this Uzytkownik. The pesel field corresponds to the
     * database column carsharing.carsharing.uzytkownik.pesel.
     * 
     * @param pesel to set of this Uzytkownik
     * @return      this Uzytkownik instance
     */
    Uzytkownik setPesel(int pesel);
    
    /**
     * Sets the stanSkarbonki of this Uzytkownik. The stanSkarbonki field
     * corresponds to the database column
     * carsharing.carsharing.uzytkownik.stan_skarbonki.
     * 
     * @param stanSkarbonki to set of this Uzytkownik
     * @return              this Uzytkownik instance
     */
    Uzytkownik setStanSkarbonki(double stanSkarbonki);
    
    enum Identifier implements ColumnIdentifier<Uzytkownik> {
        
        MAIL           ("mail"),
        HASLO          ("haslo"),
        IMIE           ("imie"),
        NAZWISKO       ("nazwisko"),
        PESEL          ("pesel"),
        STAN_SKARBONKI ("stan_skarbonki");
        
        private final String columnId;
        private final TableIdentifier<Uzytkownik> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "carsharing";
        }
        
        @Override
        public String getSchemaId() {
            return "carsharing";
        }
        
        @Override
        public String getTableId() {
            return "uzytkownik";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Uzytkownik> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}