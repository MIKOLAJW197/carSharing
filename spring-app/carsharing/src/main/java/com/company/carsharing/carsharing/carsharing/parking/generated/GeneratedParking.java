package com.company.carsharing.carsharing.carsharing.parking.generated;

import com.company.carsharing.carsharing.carsharing.parking.Parking;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.company.carsharing.carsharing.carsharing.parking.Parking}-interface
 * representing entities of the {@code parking}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedParking {
    
    /**
     * This Field corresponds to the {@link Parking} field that can be obtained
     * using the {@link Parking#getLokalizacja()} method.
     */
    StringField<Parking, String> LOKALIZACJA = StringField.create(
        Identifier.LOKALIZACJA,
        Parking::getLokalizacja,
        Parking::setLokalizacja,
        TypeMapper.identity(),
        true
    );
    /**
     * This Field corresponds to the {@link Parking} field that can be obtained
     * using the {@link Parking#getLiczbaMiejsc()} method.
     */
    IntField<Parking, Integer> LICZBA_MIEJSC = IntField.create(
        Identifier.LICZBA_MIEJSC,
        Parking::getLiczbaMiejsc,
        Parking::setLiczbaMiejsc,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the lokalizacja of this Parking. The lokalizacja field
     * corresponds to the database column
     * carsharing.carsharing.parking.lokalizacja.
     * 
     * @return the lokalizacja of this Parking
     */
    String getLokalizacja();
    
    /**
     * Returns the liczbaMiejsc of this Parking. The liczbaMiejsc field
     * corresponds to the database column
     * carsharing.carsharing.parking.liczba_miejsc.
     * 
     * @return the liczbaMiejsc of this Parking
     */
    int getLiczbaMiejsc();
    
    /**
     * Sets the lokalizacja of this Parking. The lokalizacja field corresponds
     * to the database column carsharing.carsharing.parking.lokalizacja.
     * 
     * @param lokalizacja to set of this Parking
     * @return            this Parking instance
     */
    Parking setLokalizacja(String lokalizacja);
    
    /**
     * Sets the liczbaMiejsc of this Parking. The liczbaMiejsc field corresponds
     * to the database column carsharing.carsharing.parking.liczba_miejsc.
     * 
     * @param liczbaMiejsc to set of this Parking
     * @return             this Parking instance
     */
    Parking setLiczbaMiejsc(int liczbaMiejsc);
    
    enum Identifier implements ColumnIdentifier<Parking> {
        
        LOKALIZACJA   ("lokalizacja"),
        LICZBA_MIEJSC ("liczba_miejsc");
        
        private final String columnId;
        private final TableIdentifier<Parking> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "carsharing";
        }
        
        @Override
        public String getSchemaId() {
            return "carsharing";
        }
        
        @Override
        public String getTableId() {
            return "parking";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Parking> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}