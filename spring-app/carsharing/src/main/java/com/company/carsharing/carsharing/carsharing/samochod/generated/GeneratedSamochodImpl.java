package com.company.carsharing.carsharing.carsharing.samochod.generated;

import com.company.carsharing.carsharing.carsharing.baza.Baza;
import com.company.carsharing.carsharing.carsharing.parking.Parking;
import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.carsharing.carsharing.carsharing.samochod.Samochod}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSamochodImpl implements Samochod {
    
    private String nrRejestracyjny;
    private boolean dostepny;
    private String model;
    private String marka;
    private double przebieg;
    private String lokalizacjaPozaP;
    private String bazaLokalizacja;
    private String parkingLokalizacja;
    
    protected GeneratedSamochodImpl() {}
    
    @Override
    public String getNrRejestracyjny() {
        return nrRejestracyjny;
    }
    
    @Override
    public boolean getDostepny() {
        return dostepny;
    }
    
    @Override
    public String getModel() {
        return model;
    }
    
    @Override
    public String getMarka() {
        return marka;
    }
    
    @Override
    public double getPrzebieg() {
        return przebieg;
    }
    
    @Override
    public Optional<String> getLokalizacjaPozaP() {
        return Optional.ofNullable(lokalizacjaPozaP);
    }
    
    @Override
    public Optional<String> getBazaLokalizacja() {
        return Optional.ofNullable(bazaLokalizacja);
    }
    
    @Override
    public Optional<String> getParkingLokalizacja() {
        return Optional.ofNullable(parkingLokalizacja);
    }
    
    @Override
    public Samochod setNrRejestracyjny(String nrRejestracyjny) {
        this.nrRejestracyjny = nrRejestracyjny;
        return this;
    }
    
    @Override
    public Samochod setDostepny(boolean dostepny) {
        this.dostepny = dostepny;
        return this;
    }
    
    @Override
    public Samochod setModel(String model) {
        this.model = model;
        return this;
    }
    
    @Override
    public Samochod setMarka(String marka) {
        this.marka = marka;
        return this;
    }
    
    @Override
    public Samochod setPrzebieg(double przebieg) {
        this.przebieg = przebieg;
        return this;
    }
    
    @Override
    public Samochod setLokalizacjaPozaP(String lokalizacjaPozaP) {
        this.lokalizacjaPozaP = lokalizacjaPozaP;
        return this;
    }
    
    @Override
    public Samochod setBazaLokalizacja(String bazaLokalizacja) {
        this.bazaLokalizacja = bazaLokalizacja;
        return this;
    }
    
    @Override
    public Samochod setParkingLokalizacja(String parkingLokalizacja) {
        this.parkingLokalizacja = parkingLokalizacja;
        return this;
    }
    
    @Override
    public Optional<Baza> findBazaLokalizacja(Manager<Baza> foreignManager) {
        if (getBazaLokalizacja().isPresent()) {
            return foreignManager.stream().filter(Baza.LOKALIZACJA.equal(getBazaLokalizacja().get())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Parking> findParkingLokalizacja(Manager<Parking> foreignManager) {
        if (getParkingLokalizacja().isPresent()) {
            return foreignManager.stream().filter(Parking.LOKALIZACJA.equal(getParkingLokalizacja().get())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("nrRejestracyjny = "    + Objects.toString(getNrRejestracyjny()));
        sj.add("dostepny = "           + Objects.toString(getDostepny()));
        sj.add("model = "              + Objects.toString(getModel()));
        sj.add("marka = "              + Objects.toString(getMarka()));
        sj.add("przebieg = "           + Objects.toString(getPrzebieg()));
        sj.add("lokalizacjaPozaP = "   + Objects.toString(OptionalUtil.unwrap(getLokalizacjaPozaP())));
        sj.add("bazaLokalizacja = "    + Objects.toString(OptionalUtil.unwrap(getBazaLokalizacja())));
        sj.add("parkingLokalizacja = " + Objects.toString(OptionalUtil.unwrap(getParkingLokalizacja())));
        return "SamochodImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Samochod)) { return false; }
        final Samochod thatSamochod = (Samochod)that;
        if (!Objects.equals(this.getNrRejestracyjny(), thatSamochod.getNrRejestracyjny())) { return false; }
        if (this.getDostepny() != thatSamochod.getDostepny()) { return false; }
        if (!Objects.equals(this.getModel(), thatSamochod.getModel())) { return false; }
        if (!Objects.equals(this.getMarka(), thatSamochod.getMarka())) { return false; }
        if (this.getPrzebieg() != thatSamochod.getPrzebieg()) { return false; }
        if (!Objects.equals(this.getLokalizacjaPozaP(), thatSamochod.getLokalizacjaPozaP())) { return false; }
        if (!Objects.equals(this.getBazaLokalizacja(), thatSamochod.getBazaLokalizacja())) { return false; }
        if (!Objects.equals(this.getParkingLokalizacja(), thatSamochod.getParkingLokalizacja())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getNrRejestracyjny());
        hash = 31 * hash + Boolean.hashCode(getDostepny());
        hash = 31 * hash + Objects.hashCode(getModel());
        hash = 31 * hash + Objects.hashCode(getMarka());
        hash = 31 * hash + Double.hashCode(getPrzebieg());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getLokalizacjaPozaP()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getBazaLokalizacja()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getParkingLokalizacja()));
        return hash;
    }
}