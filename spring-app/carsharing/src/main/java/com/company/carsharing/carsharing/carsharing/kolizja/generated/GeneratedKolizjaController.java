package com.company.carsharing.carsharing.carsharing.kolizja.generated;

import com.company.carsharing.carsharing.carsharing.kolizja.Kolizja;
import com.company.carsharing.carsharing.carsharing.kolizja.KolizjaManager;
import com.company.carsharing.carsharing.carsharing.kolizja.generated.GeneratedKolizja.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.sql.Date;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Kolizja entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedKolizjaController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired KolizjaManager manager;
    protected JsonEncoder<Kolizja> encoder;
    
    @PostConstruct
    void createKolizjaEncoder() {
        encoder = jsonComponent.<Kolizja>emptyEncoder()
            .put("id", Kolizja.ID)
            .put("lokalizacja", Kolizja.LOKALIZACJA)
            .put("data", Kolizja.DATA)
            .put("przejazdDataRozpoczecia", Kolizja.PRZEJAZD_DATA_ROZPOCZECIA)
            .put("przejazdUzytkownikMail", Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL)
            .put("przejazdNrRejestracyjny", Kolizja.PRZEJAZD_NR_REJESTRACYJNY)
            .put("pracownikPesel", Kolizja.PRACOWNIK_PESEL)
            .put("pracownikLokalizacja", Kolizja.PRACOWNIK_LOKALIZACJA)
            .build();
    }
    
    @GetMapping(path = "/kolizja", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, KolizjaFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, KolizjaSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedKolizja.Identifier> result = EnumSet.noneOf(GeneratedKolizja.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "id":                      return GeneratedKolizja.Identifier.ID;
            case "lokalizacja":             return GeneratedKolizja.Identifier.LOKALIZACJA;
            case "data":                    return GeneratedKolizja.Identifier.DATA;
            case "przejazdDataRozpoczecia": return GeneratedKolizja.Identifier.PRZEJAZD_DATA_ROZPOCZECIA;
            case "przejazdUzytkownikMail":  return GeneratedKolizja.Identifier.PRZEJAZD_UZYTKOWNIK_MAIL;
            case "przejazdNrRejestracyjny": return GeneratedKolizja.Identifier.PRZEJAZD_NR_REJESTRACYJNY;
            case "pracownikPesel":          return GeneratedKolizja.Identifier.PRACOWNIK_PESEL;
            case "pracownikLokalizacja":    return GeneratedKolizja.Identifier.PRACOWNIK_LOKALIZACJA;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Kolizja> fieldOf(Identifier columnId) {
        switch (columnId) {
            case ID:                        return Kolizja.ID;
            case LOKALIZACJA:               return Kolizja.LOKALIZACJA;
            case DATA:                      return Kolizja.DATA;
            case PRZEJAZD_DATA_ROZPOCZECIA: return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA;
            case PRZEJAZD_UZYTKOWNIK_MAIL:  return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL;
            case PRZEJAZD_NR_REJESTRACYJNY: return Kolizja.PRZEJAZD_NR_REJESTRACYJNY;
            case PRACOWNIK_PESEL:           return Kolizja.PRACOWNIK_PESEL;
            case PRACOWNIK_LOKALIZACJA:     return Kolizja.PRACOWNIK_LOKALIZACJA;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Kolizja>> predicates,
            List<Comparator<Kolizja>> sorters,
            long start,
            long limit) {
        Stream<Kolizja> stream = manager.stream();
        
        for (final Predicate<Kolizja> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Kolizja>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class KolizjaFilter extends AbstractFilter<Kolizja> {
        
        public KolizjaFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Kolizja> toPredicate() {
            switch (property()) {
                case "id" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Kolizja.ID.equal(v);
                        case "ne"   : return Kolizja.ID.notEqual(v);
                        case "lt"   : return Kolizja.ID.lessThan(v);
                        case "le"   : return Kolizja.ID.lessOrEqual(v);
                        case "gt"   : return Kolizja.ID.greaterThan(v);
                        case "ge"   : return Kolizja.ID.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.id."
                        );
                    }
                }
                case "lokalizacja" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Kolizja.LOKALIZACJA.equal(v);
                        case "ne"   : return Kolizja.LOKALIZACJA.notEqual(v);
                        case "lt"   : return Kolizja.LOKALIZACJA.lessThan(v);
                        case "le"   : return Kolizja.LOKALIZACJA.lessOrEqual(v);
                        case "gt"   : return Kolizja.LOKALIZACJA.greaterThan(v);
                        case "ge"   : return Kolizja.LOKALIZACJA.greaterOrEqual(v);
                        case "like" : return Kolizja.LOKALIZACJA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.lokalizacja."
                        );
                    }
                }
                case "data" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Kolizja.DATA.equal(v);
                        case "ne"   : return Kolizja.DATA.notEqual(v);
                        case "lt"   : return Kolizja.DATA.lessThan(v);
                        case "le"   : return Kolizja.DATA.lessOrEqual(v);
                        case "gt"   : return Kolizja.DATA.greaterThan(v);
                        case "ge"   : return Kolizja.DATA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.data."
                        );
                    }
                }
                case "przejazdDataRozpoczecia" : {
                    final Date v = Date.valueOf(value());
                    switch (operator()) {
                        case "eq"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.equal(v);
                        case "ne"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.notEqual(v);
                        case "lt"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.lessThan(v);
                        case "le"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.lessOrEqual(v);
                        case "gt"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.greaterThan(v);
                        case "ge"   : return Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.przejazdDataRozpoczecia."
                        );
                    }
                }
                case "przejazdUzytkownikMail" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.equal(v);
                        case "ne"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.notEqual(v);
                        case "lt"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.lessThan(v);
                        case "le"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.lessOrEqual(v);
                        case "gt"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.greaterThan(v);
                        case "ge"   : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.greaterOrEqual(v);
                        case "like" : return Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.przejazdUzytkownikMail."
                        );
                    }
                }
                case "przejazdNrRejestracyjny" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.equal(v);
                        case "ne"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.notEqual(v);
                        case "lt"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.lessThan(v);
                        case "le"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.lessOrEqual(v);
                        case "gt"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.greaterThan(v);
                        case "ge"   : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.greaterOrEqual(v);
                        case "like" : return Kolizja.PRZEJAZD_NR_REJESTRACYJNY.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.przejazdNrRejestracyjny."
                        );
                    }
                }
                case "pracownikPesel" : {
                    final int v = Integer.parseInt(value());
                    switch (operator()) {
                        case "eq"   : return Kolizja.PRACOWNIK_PESEL.equal(v);
                        case "ne"   : return Kolizja.PRACOWNIK_PESEL.notEqual(v);
                        case "lt"   : return Kolizja.PRACOWNIK_PESEL.lessThan(v);
                        case "le"   : return Kolizja.PRACOWNIK_PESEL.lessOrEqual(v);
                        case "gt"   : return Kolizja.PRACOWNIK_PESEL.greaterThan(v);
                        case "ge"   : return Kolizja.PRACOWNIK_PESEL.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.pracownikPesel."
                        );
                    }
                }
                case "pracownikLokalizacja" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Kolizja.PRACOWNIK_LOKALIZACJA.equal(v);
                        case "ne"   : return Kolizja.PRACOWNIK_LOKALIZACJA.notEqual(v);
                        case "lt"   : return Kolizja.PRACOWNIK_LOKALIZACJA.lessThan(v);
                        case "le"   : return Kolizja.PRACOWNIK_LOKALIZACJA.lessOrEqual(v);
                        case "gt"   : return Kolizja.PRACOWNIK_LOKALIZACJA.greaterThan(v);
                        case "ge"   : return Kolizja.PRACOWNIK_LOKALIZACJA.greaterOrEqual(v);
                        case "like" : return Kolizja.PRACOWNIK_LOKALIZACJA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Kolizja.pracownikLokalizacja."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Kolizja property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class KolizjaSort extends AbstractSort<Kolizja> {
        
        public KolizjaSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Kolizja> toComparator() {
            final Comparator<Kolizja> comparator;
            switch (property()) {
                case "id"                      : comparator = Kolizja.ID.comparator();                        break;
                case "lokalizacja"             : comparator = Kolizja.LOKALIZACJA.comparator();               break;
                case "data"                    : comparator = Kolizja.DATA.comparator();                      break;
                case "przejazdDataRozpoczecia" : comparator = Kolizja.PRZEJAZD_DATA_ROZPOCZECIA.comparator(); break;
                case "przejazdUzytkownikMail"  : comparator = Kolizja.PRZEJAZD_UZYTKOWNIK_MAIL.comparator();  break;
                case "przejazdNrRejestracyjny" : comparator = Kolizja.PRZEJAZD_NR_REJESTRACYJNY.comparator(); break;
                case "pracownikPesel"          : comparator = Kolizja.PRACOWNIK_PESEL.comparator();           break;
                case "pracownikLokalizacja"    : comparator = Kolizja.PRACOWNIK_LOKALIZACJA.comparator();     break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Kolizja property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}