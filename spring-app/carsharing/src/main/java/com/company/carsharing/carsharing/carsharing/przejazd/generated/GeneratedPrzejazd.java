package com.company.carsharing.carsharing.carsharing.przejazd.generated;

import com.company.carsharing.carsharing.carsharing.cennik.Cennik;
import com.company.carsharing.carsharing.carsharing.przejazd.Przejazd;
import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.company.carsharing.carsharing.carsharing.uzytkownik.Uzytkownik;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.DoubleField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.StringForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Date;

/**
 * The generated base for the {@link
 * com.company.carsharing.carsharing.carsharing.przejazd.Przejazd}-interface
 * representing entities of the {@code przejazd}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedPrzejazd {
    
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getDataRozpoczecia()} method.
     */
    ComparableField<Przejazd, Date, Date> DATA_ROZPOCZECIA = ComparableField.create(
        Identifier.DATA_ROZPOCZECIA,
        Przejazd::getDataRozpoczecia,
        Przejazd::setDataRozpoczecia,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getDataZakonczenia()} method.
     */
    ComparableField<Przejazd, Date, Date> DATA_ZAKONCZENIA = ComparableField.create(
        Identifier.DATA_ZAKONCZENIA,
        Przejazd::getDataZakonczenia,
        Przejazd::setDataZakonczenia,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getDytans()} method.
     */
    DoubleField<Przejazd, Double> DYTANS = DoubleField.create(
        Identifier.DYTANS,
        Przejazd::getDytans,
        Przejazd::setDytans,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getLokalizacjaPoczatkowa()} method.
     */
    StringField<Przejazd, String> LOKALIZACJA_POCZATKOWA = StringField.create(
        Identifier.LOKALIZACJA_POCZATKOWA,
        Przejazd::getLokalizacjaPoczatkowa,
        Przejazd::setLokalizacjaPoczatkowa,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getLokalizacjaKoncowa()} method.
     */
    StringField<Przejazd, String> LOKALIZACJA_KONCOWA = StringField.create(
        Identifier.LOKALIZACJA_KONCOWA,
        Przejazd::getLokalizacjaKoncowa,
        Przejazd::setLokalizacjaKoncowa,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getUzytkownikMail()} method.
     */
    StringForeignKeyField<Przejazd, String, Uzytkownik> UZYTKOWNIK_MAIL = StringForeignKeyField.create(
        Identifier.UZYTKOWNIK_MAIL,
        Przejazd::getUzytkownikMail,
        Przejazd::setUzytkownikMail,
        Uzytkownik.MAIL,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getCennikOdKiedy()} method.
     */
    ComparableForeignKeyField<Przejazd, Date, Date, Cennik> CENNIK_OD_KIEDY = ComparableForeignKeyField.create(
        Identifier.CENNIK_OD_KIEDY,
        Przejazd::getCennikOdKiedy,
        Przejazd::setCennikOdKiedy,
        Cennik.OD_KIEDY,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link Przejazd} field that can be obtained
     * using the {@link Przejazd#getSamochodNrRejestracyjny()} method.
     */
    StringForeignKeyField<Przejazd, String, Samochod> SAMOCHOD_NR_REJESTRACYJNY = StringForeignKeyField.create(
        Identifier.SAMOCHOD_NR_REJESTRACYJNY,
        Przejazd::getSamochodNrRejestracyjny,
        Przejazd::setSamochodNrRejestracyjny,
        Samochod.NR_REJESTRACYJNY,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the dataRozpoczecia of this Przejazd. The dataRozpoczecia field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.data_rozpoczecia.
     * 
     * @return the dataRozpoczecia of this Przejazd
     */
    Date getDataRozpoczecia();
    
    /**
     * Returns the dataZakonczenia of this Przejazd. The dataZakonczenia field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.data_zakonczenia.
     * 
     * @return the dataZakonczenia of this Przejazd
     */
    Date getDataZakonczenia();
    
    /**
     * Returns the dytans of this Przejazd. The dytans field corresponds to the
     * database column carsharing.carsharing.przejazd.dytans.
     * 
     * @return the dytans of this Przejazd
     */
    double getDytans();
    
    /**
     * Returns the lokalizacjaPoczatkowa of this Przejazd. The
     * lokalizacjaPoczatkowa field corresponds to the database column
     * carsharing.carsharing.przejazd.lokalizacja_poczatkowa.
     * 
     * @return the lokalizacjaPoczatkowa of this Przejazd
     */
    String getLokalizacjaPoczatkowa();
    
    /**
     * Returns the lokalizacjaKoncowa of this Przejazd. The lokalizacjaKoncowa
     * field corresponds to the database column
     * carsharing.carsharing.przejazd.lokalizacja_koncowa.
     * 
     * @return the lokalizacjaKoncowa of this Przejazd
     */
    String getLokalizacjaKoncowa();
    
    /**
     * Returns the uzytkownikMail of this Przejazd. The uzytkownikMail field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.uzytkownik_mail.
     * 
     * @return the uzytkownikMail of this Przejazd
     */
    String getUzytkownikMail();
    
    /**
     * Returns the cennikOdKiedy of this Przejazd. The cennikOdKiedy field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.cennik_od_kiedy.
     * 
     * @return the cennikOdKiedy of this Przejazd
     */
    Date getCennikOdKiedy();
    
    /**
     * Returns the samochodNrRejestracyjny of this Przejazd. The
     * samochodNrRejestracyjny field corresponds to the database column
     * carsharing.carsharing.przejazd.samochod_nr_rejestracyjny.
     * 
     * @return the samochodNrRejestracyjny of this Przejazd
     */
    String getSamochodNrRejestracyjny();
    
    /**
     * Sets the dataRozpoczecia of this Przejazd. The dataRozpoczecia field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.data_rozpoczecia.
     * 
     * @param dataRozpoczecia to set of this Przejazd
     * @return                this Przejazd instance
     */
    Przejazd setDataRozpoczecia(Date dataRozpoczecia);
    
    /**
     * Sets the dataZakonczenia of this Przejazd. The dataZakonczenia field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.data_zakonczenia.
     * 
     * @param dataZakonczenia to set of this Przejazd
     * @return                this Przejazd instance
     */
    Przejazd setDataZakonczenia(Date dataZakonczenia);
    
    /**
     * Sets the dytans of this Przejazd. The dytans field corresponds to the
     * database column carsharing.carsharing.przejazd.dytans.
     * 
     * @param dytans to set of this Przejazd
     * @return       this Przejazd instance
     */
    Przejazd setDytans(double dytans);
    
    /**
     * Sets the lokalizacjaPoczatkowa of this Przejazd. The
     * lokalizacjaPoczatkowa field corresponds to the database column
     * carsharing.carsharing.przejazd.lokalizacja_poczatkowa.
     * 
     * @param lokalizacjaPoczatkowa to set of this Przejazd
     * @return                      this Przejazd instance
     */
    Przejazd setLokalizacjaPoczatkowa(String lokalizacjaPoczatkowa);
    
    /**
     * Sets the lokalizacjaKoncowa of this Przejazd. The lokalizacjaKoncowa
     * field corresponds to the database column
     * carsharing.carsharing.przejazd.lokalizacja_koncowa.
     * 
     * @param lokalizacjaKoncowa to set of this Przejazd
     * @return                   this Przejazd instance
     */
    Przejazd setLokalizacjaKoncowa(String lokalizacjaKoncowa);
    
    /**
     * Sets the uzytkownikMail of this Przejazd. The uzytkownikMail field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.uzytkownik_mail.
     * 
     * @param uzytkownikMail to set of this Przejazd
     * @return               this Przejazd instance
     */
    Przejazd setUzytkownikMail(String uzytkownikMail);
    
    /**
     * Sets the cennikOdKiedy of this Przejazd. The cennikOdKiedy field
     * corresponds to the database column
     * carsharing.carsharing.przejazd.cennik_od_kiedy.
     * 
     * @param cennikOdKiedy to set of this Przejazd
     * @return              this Przejazd instance
     */
    Przejazd setCennikOdKiedy(Date cennikOdKiedy);
    
    /**
     * Sets the samochodNrRejestracyjny of this Przejazd. The
     * samochodNrRejestracyjny field corresponds to the database column
     * carsharing.carsharing.przejazd.samochod_nr_rejestracyjny.
     * 
     * @param samochodNrRejestracyjny to set of this Przejazd
     * @return                        this Przejazd instance
     */
    Przejazd setSamochodNrRejestracyjny(String samochodNrRejestracyjny);
    
    /**
     * Queries the specified manager for the referenced Uzytkownik. If no such
     * Uzytkownik exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Uzytkownik findUzytkownikMail(Manager<Uzytkownik> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Cennik. If no such
     * Cennik exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Cennik findCennikOdKiedy(Manager<Cennik> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Samochod. If no such
     * Samochod exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Samochod findSamochodNrRejestracyjny(Manager<Samochod> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Przejazd> {
        
        DATA_ROZPOCZECIA          ("data_rozpoczecia"),
        DATA_ZAKONCZENIA          ("data_zakonczenia"),
        DYTANS                    ("dytans"),
        LOKALIZACJA_POCZATKOWA    ("lokalizacja_poczatkowa"),
        LOKALIZACJA_KONCOWA       ("lokalizacja_koncowa"),
        UZYTKOWNIK_MAIL           ("uzytkownik_mail"),
        CENNIK_OD_KIEDY           ("cennik_od_kiedy"),
        SAMOCHOD_NR_REJESTRACYJNY ("samochod_nr_rejestracyjny");
        
        private final String columnId;
        private final TableIdentifier<Przejazd> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "carsharing";
        }
        
        @Override
        public String getSchemaId() {
            return "carsharing";
        }
        
        @Override
        public String getTableId() {
            return "przejazd";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Przejazd> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}