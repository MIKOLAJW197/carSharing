package com.company.carsharing.carsharing.carsharing.samochod.generated;

import com.company.carsharing.carsharing.carsharing.samochod.Samochod;
import com.company.carsharing.carsharing.carsharing.samochod.SamochodManager;
import com.company.carsharing.carsharing.carsharing.samochod.generated.GeneratedSamochod.Identifier;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.json.Json;
import com.speedment.enterprise.plugins.json.JsonCollectors;
import com.speedment.enterprise.plugins.json.JsonComponent;
import com.speedment.enterprise.plugins.json.JsonEncoder;
import com.speedment.enterprise.plugins.spring.runtime.AbstractFilter;
import com.speedment.enterprise.plugins.spring.runtime.AbstractSort;
import com.speedment.enterprise.plugins.spring.runtime.ControllerUtil;
import com.speedment.runtime.field.Field;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Comparator;
import java.util.EnumSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.annotation.PostConstruct;

import static java.util.stream.Collectors.toList;

/**
 * The default REST controller logic for Samochod entities.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
@CrossOrigin(origins = "*", maxAge = 3600)
public abstract class GeneratedSamochodController {
    
    protected @Autowired JsonComponent jsonComponent;
    protected @Autowired SamochodManager manager;
    protected JsonEncoder<Samochod> encoder;
    
    @PostConstruct
    void createSamochodEncoder() {
        encoder = jsonComponent.<Samochod>emptyEncoder()
            .put("nrRejestracyjny", Samochod.NR_REJESTRACYJNY)
            .put("dostepny", Samochod.DOSTEPNY)
            .put("model", Samochod.MODEL)
            .put("marka", Samochod.MARKA)
            .put("przebieg", Samochod.PRZEBIEG)
            .put("lokalizacjaPozaP", Samochod.LOKALIZACJA_POZA_P)
            .put("bazaLokalizacja", Samochod.BAZA_LOKALIZACJA)
            .put("parkingLokalizacja", Samochod.PARKING_LOKALIZACJA)
            .build();
    }
    
    @GetMapping(path = "/samochod", produces = "application/json")
    public String get(
            @RequestParam(name = "filter", defaultValue = "[]") String filters,
            @RequestParam(name = "sort", defaultValue = "[]") String sorters,
            @RequestParam(value = "start", defaultValue = "0") long start,
            @RequestParam(value = "limit", defaultValue = "25") long limit) {
        
        return getHelper(
            ControllerUtil.parseFilters(filters, SamochodFilter::new).collect(toList()),
            ControllerUtil.parseSorts(sorters, SamochodSort::new).collect(toList()),
            start,
            limit
        );
    }
    
    protected final Set<Identifier> parseColumns(String jsonColumnList) {
        try {
            @SuppressWarnings("unchecked")
            final List<String> parsed = (List<String>) Json.fromJson(jsonColumnList);
            final Set<GeneratedSamochod.Identifier> result = EnumSet.noneOf(GeneratedSamochod.Identifier.class);
            parsed.stream().map(this::parseColumn).forEach(result::add);
            return result;
        } catch (final ClassCastException ex) {
            throw new IllegalArgumentException("Error in parsed JSON.");
        }
    }
    
    protected final Identifier parseColumn(String jsonColumn) {
        switch (jsonColumn) {
            case "nrRejestracyjny":    return GeneratedSamochod.Identifier.NR_REJESTRACYJNY;
            case "dostepny":           return GeneratedSamochod.Identifier.DOSTEPNY;
            case "model":              return GeneratedSamochod.Identifier.MODEL;
            case "marka":              return GeneratedSamochod.Identifier.MARKA;
            case "przebieg":           return GeneratedSamochod.Identifier.PRZEBIEG;
            case "lokalizacjaPozaP":   return GeneratedSamochod.Identifier.LOKALIZACJA_POZA_P;
            case "bazaLokalizacja":    return GeneratedSamochod.Identifier.BAZA_LOKALIZACJA;
            case "parkingLokalizacja": return GeneratedSamochod.Identifier.PARKING_LOKALIZACJA;
            default: throw new IllegalArgumentException(
                "Unknown column '" + jsonColumn + "'."
            );
        }
    }
    
    protected final Field<Samochod> fieldOf(Identifier columnId) {
        switch (columnId) {
            case NR_REJESTRACYJNY:    return Samochod.NR_REJESTRACYJNY;
            case DOSTEPNY:            return Samochod.DOSTEPNY;
            case MODEL:               return Samochod.MODEL;
            case MARKA:               return Samochod.MARKA;
            case PRZEBIEG:            return Samochod.PRZEBIEG;
            case LOKALIZACJA_POZA_P:  return Samochod.LOKALIZACJA_POZA_P;
            case BAZA_LOKALIZACJA:    return Samochod.BAZA_LOKALIZACJA;
            case PARKING_LOKALIZACJA: return Samochod.PARKING_LOKALIZACJA;
            default: throw new IllegalArgumentException(
                "Unknown column '" + columnId + "'."
            );
        }
    }
    
    protected String getHelper(
            List<Predicate<Samochod>> predicates,
            List<Comparator<Samochod>> sorters,
            long start,
            long limit) {
        Stream<Samochod> stream = manager.stream();
        
        for (final Predicate<Samochod> predicate : predicates) {
            stream = stream.filter(predicate);
        }
        
        if (!sorters.isEmpty()) {
            final Optional<Comparator<Samochod>> comparator = sorters.stream()
                .reduce(Comparator::thenComparing);
            
            stream = stream.sorted(comparator.get());
        }
        
        return stream
            .skip(start)
            .limit(limit)
            .collect(JsonCollectors.toList(encoder));
    }
    
    /**
     * How to filter the results from the controller. This class is designed to
     * be deserialized automatically from JSON.
     */
    public final static class SamochodFilter extends AbstractFilter<Samochod> {
        
        public SamochodFilter(
                String operator,
                String property,
                String value) {
            super(operator, property, value);
        }
        
        @Override
        public Predicate<Samochod> toPredicate() {
            switch (property()) {
                case "nrRejestracyjny" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.NR_REJESTRACYJNY.equal(v);
                        case "ne"   : return Samochod.NR_REJESTRACYJNY.notEqual(v);
                        case "lt"   : return Samochod.NR_REJESTRACYJNY.lessThan(v);
                        case "le"   : return Samochod.NR_REJESTRACYJNY.lessOrEqual(v);
                        case "gt"   : return Samochod.NR_REJESTRACYJNY.greaterThan(v);
                        case "ge"   : return Samochod.NR_REJESTRACYJNY.greaterOrEqual(v);
                        case "like" : return Samochod.NR_REJESTRACYJNY.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.nrRejestracyjny."
                        );
                    }
                }
                case "model" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.MODEL.equal(v);
                        case "ne"   : return Samochod.MODEL.notEqual(v);
                        case "lt"   : return Samochod.MODEL.lessThan(v);
                        case "le"   : return Samochod.MODEL.lessOrEqual(v);
                        case "gt"   : return Samochod.MODEL.greaterThan(v);
                        case "ge"   : return Samochod.MODEL.greaterOrEqual(v);
                        case "like" : return Samochod.MODEL.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.model."
                        );
                    }
                }
                case "marka" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.MARKA.equal(v);
                        case "ne"   : return Samochod.MARKA.notEqual(v);
                        case "lt"   : return Samochod.MARKA.lessThan(v);
                        case "le"   : return Samochod.MARKA.lessOrEqual(v);
                        case "gt"   : return Samochod.MARKA.greaterThan(v);
                        case "ge"   : return Samochod.MARKA.greaterOrEqual(v);
                        case "like" : return Samochod.MARKA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.marka."
                        );
                    }
                }
                case "przebieg" : {
                    final double v = Double.parseDouble(value());
                    switch (operator()) {
                        case "eq"   : return Samochod.PRZEBIEG.equal(v);
                        case "ne"   : return Samochod.PRZEBIEG.notEqual(v);
                        case "lt"   : return Samochod.PRZEBIEG.lessThan(v);
                        case "le"   : return Samochod.PRZEBIEG.lessOrEqual(v);
                        case "gt"   : return Samochod.PRZEBIEG.greaterThan(v);
                        case "ge"   : return Samochod.PRZEBIEG.greaterOrEqual(v);
                        case "like" : // Fallthrough
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.przebieg."
                        );
                    }
                }
                case "lokalizacjaPozaP" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.LOKALIZACJA_POZA_P.equal(v);
                        case "ne"   : return Samochod.LOKALIZACJA_POZA_P.notEqual(v);
                        case "lt"   : return Samochod.LOKALIZACJA_POZA_P.lessThan(v);
                        case "le"   : return Samochod.LOKALIZACJA_POZA_P.lessOrEqual(v);
                        case "gt"   : return Samochod.LOKALIZACJA_POZA_P.greaterThan(v);
                        case "ge"   : return Samochod.LOKALIZACJA_POZA_P.greaterOrEqual(v);
                        case "like" : return Samochod.LOKALIZACJA_POZA_P.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.lokalizacjaPozaP."
                        );
                    }
                }
                case "bazaLokalizacja" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.BAZA_LOKALIZACJA.equal(v);
                        case "ne"   : return Samochod.BAZA_LOKALIZACJA.notEqual(v);
                        case "lt"   : return Samochod.BAZA_LOKALIZACJA.lessThan(v);
                        case "le"   : return Samochod.BAZA_LOKALIZACJA.lessOrEqual(v);
                        case "gt"   : return Samochod.BAZA_LOKALIZACJA.greaterThan(v);
                        case "ge"   : return Samochod.BAZA_LOKALIZACJA.greaterOrEqual(v);
                        case "like" : return Samochod.BAZA_LOKALIZACJA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.bazaLokalizacja."
                        );
                    }
                }
                case "parkingLokalizacja" : {
                    final String v = value();
                    switch (operator()) {
                        case "eq"   : return Samochod.PARKING_LOKALIZACJA.equal(v);
                        case "ne"   : return Samochod.PARKING_LOKALIZACJA.notEqual(v);
                        case "lt"   : return Samochod.PARKING_LOKALIZACJA.lessThan(v);
                        case "le"   : return Samochod.PARKING_LOKALIZACJA.lessOrEqual(v);
                        case "gt"   : return Samochod.PARKING_LOKALIZACJA.greaterThan(v);
                        case "ge"   : return Samochod.PARKING_LOKALIZACJA.greaterOrEqual(v);
                        case "like" : return Samochod.PARKING_LOKALIZACJA.contains(v);
                        default : throw new IllegalArgumentException(
                            "'" + operator() + "' is not a valid operator for " +
                            "Samochod.parkingLokalizacja."
                        );
                    }
                }
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Samochod property."
                );
            }
        }
    }
    
    /**
     * How to sort the results from the controller. This class is designed to be
     * deserialized automatically from JSON.
     */
    public final static class SamochodSort extends AbstractSort<Samochod> {
        
        public SamochodSort(String property, String direction) {
            super(property, direction);
        }
        
        @Override
        public Comparator<Samochod> toComparator() {
            final Comparator<Samochod> comparator;
            switch (property()) {
                case "nrRejestracyjny"    : comparator = Samochod.NR_REJESTRACYJNY.comparator();    break;
                case "model"              : comparator = Samochod.MODEL.comparator();               break;
                case "marka"              : comparator = Samochod.MARKA.comparator();               break;
                case "przebieg"           : comparator = Samochod.PRZEBIEG.comparator();            break;
                case "lokalizacjaPozaP"   : comparator = Samochod.LOKALIZACJA_POZA_P.comparator();  break;
                case "bazaLokalizacja"    : comparator = Samochod.BAZA_LOKALIZACJA.comparator();    break;
                case "parkingLokalizacja" : comparator = Samochod.PARKING_LOKALIZACJA.comparator(); break;
                default : throw new IllegalArgumentException(
                    "'" + property() + "' is not a valid Samochod property."
                );
            }
            
            switch (direction()) {
                case "ASC"  : return comparator;
                case "DESC" : return comparator.reversed();
                default : throw new IllegalArgumentException(
                    "'" + direction() + "' is not a valid sort direction. " +
                    "Use either 'ASC' or 'DESC', or leave out."
                );
            }
        }
    }
}