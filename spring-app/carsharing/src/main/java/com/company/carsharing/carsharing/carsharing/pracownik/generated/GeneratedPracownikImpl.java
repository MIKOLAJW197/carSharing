package com.company.carsharing.carsharing.carsharing.pracownik.generated;

import com.company.carsharing.carsharing.carsharing.baza.Baza;
import com.company.carsharing.carsharing.carsharing.pracownik.Pracownik;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.company.carsharing.carsharing.carsharing.pracownik.Pracownik}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedPracownikImpl implements Pracownik {
    
    private int pesel;
    private String imie;
    private String nazwisko;
    private String bazaLokalizacja;
    
    protected GeneratedPracownikImpl() {}
    
    @Override
    public int getPesel() {
        return pesel;
    }
    
    @Override
    public String getImie() {
        return imie;
    }
    
    @Override
    public String getNazwisko() {
        return nazwisko;
    }
    
    @Override
    public String getBazaLokalizacja() {
        return bazaLokalizacja;
    }
    
    @Override
    public Pracownik setPesel(int pesel) {
        this.pesel = pesel;
        return this;
    }
    
    @Override
    public Pracownik setImie(String imie) {
        this.imie = imie;
        return this;
    }
    
    @Override
    public Pracownik setNazwisko(String nazwisko) {
        this.nazwisko = nazwisko;
        return this;
    }
    
    @Override
    public Pracownik setBazaLokalizacja(String bazaLokalizacja) {
        this.bazaLokalizacja = bazaLokalizacja;
        return this;
    }
    
    @Override
    public Baza findBazaLokalizacja(Manager<Baza> foreignManager) {
        return foreignManager.stream().filter(Baza.LOKALIZACJA.equal(getBazaLokalizacja())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("pesel = "           + Objects.toString(getPesel()));
        sj.add("imie = "            + Objects.toString(getImie()));
        sj.add("nazwisko = "        + Objects.toString(getNazwisko()));
        sj.add("bazaLokalizacja = " + Objects.toString(getBazaLokalizacja()));
        return "PracownikImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Pracownik)) { return false; }
        final Pracownik thatPracownik = (Pracownik)that;
        if (this.getPesel() != thatPracownik.getPesel()) { return false; }
        if (!Objects.equals(this.getImie(), thatPracownik.getImie())) { return false; }
        if (!Objects.equals(this.getNazwisko(), thatPracownik.getNazwisko())) { return false; }
        if (!Objects.equals(this.getBazaLokalizacja(), thatPracownik.getBazaLokalizacja())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getPesel());
        hash = 31 * hash + Objects.hashCode(getImie());
        hash = 31 * hash + Objects.hashCode(getNazwisko());
        hash = 31 * hash + Objects.hashCode(getBazaLokalizacja());
        return hash;
    }
}